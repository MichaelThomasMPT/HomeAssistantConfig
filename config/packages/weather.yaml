# weather:
  # - platform: bom
  #   station: IDW60901.94608

sun:

var:
  # weather_rainy_conditions is used in defining the rain detection binary_sensors below
  weather_rainy_conditions:
    friendly_name: Rainy Weather Conditions
    initial_value: "['hail', 'lightning', 'lightning-rainy', 'pouring', 'rainy', 'snowy', 'snowy-rainy', 'exceptional']"
  weather_it_will_rain_tomorrow:
    friendly_name: "Rain Is Coming Tomorrow"
    initial_value: False
  weather_it_will_rain_today:
    friendly_name: "Rain Is Coming Today"
    initial_value: False
  weather_it_will_rain_soon:
    friendly_name: "Rain Is Coming Soon"
    initial_value: False
  weather_conditions_today:
    friendly_name: "Today's Weather Conditions"
    initial_value: "Unknown"
  weather_conditions_tomorrow:
    friendly_name: "Tomorrow's Weather Conditions"
    initial_value: "Unknown"

automation:
  - alias: Weather - Update Rain Sensor
    id: weather_update_rain_sensor
    trigger:
        # Refresh every 5 minutes
      - platform: time_pattern
        minutes: "/5"
    action:
      - parallel:
          - sequence:
              - alias: Fetch Weather Forecast - Hourly
                service: weather.get_forecasts
                target:
                  entity_id: weather.banjup_hourly
                data:
                  type: hourly
                response_variable: weather_forecast_hourly
              - alias: Set Current Weather
                service: var.set
                data:
                  entity_id: var.weather_it_will_rain_soon
                  value: >-
                    {% if weather_forecast_hourly["weather.banjup_hourly"].forecast[0].precipitation > 0 %}
                    True
                    {% else %}
                    False
                    {% endif %}
          - sequence:
              - alias: Fetch Weather Forecast - Daily
                service: weather.get_forecasts
                target:
                  entity_id: weather.banjup
                data:
                  type: daily
                response_variable: weather_forecast_daily
              - alias: Set Today Weather
                service: var.set
                data:
                  entity_id: var.weather_it_will_rain_today
                  value: >-
                    {% if weather_forecast_daily["weather.banjup"].forecast[0].precipitation > 0 %}
                    True
                    {% else %}
                    False
                    {% endif %}
              - alias: Set Today Condition
                service: var.set
                data:
                  entity_id: var.weather_conditions_today
                  value: >-
                    {{ weather_forecast_daily["weather.banjup"].forecast[0].condition }}
              - alias: Set Tomorrow Weather
                service: var.set
                data:
                  entity_id: var.weather_it_will_rain_tomorrow
                  value: >-
                    {% if weather_forecast_daily["weather.banjup"].forecast[1].precipitation > 0 %}
                    True
                    {% else %}
                    False
                    {% endif %}
              - alias: Set Tomorrow Condition
                service: var.set
                data:
                  entity_id: var.weather_conditions_tomorrow
                  value: >-
                    {{ weather_forecast_daily["weather.banjup"].forecast[1].condition }}

sensor:
  # Extract Outdoor Temperature from BOM Weather Sensor
  - platform: template
    sensors: 
      current_outdoor_temperature:
        friendly_name: "Current Outdoor Temperature"
        value_template: "{{ state_attr('weather.treeby_house', 'temperature') }}"
        availability_template: "{{ states('weather.treeby_house') != 'Unavailable' }}"
        unit_of_measurement: "Â°C"

      weather_conditions_today:
        friendly_name: "Today's Weather Conditions"
        value_template: "{{ states('weather.treeby_house') }}"
        availability_template: "{{ states('weather.treeby_house') != 'Unavailable' }}"

      
