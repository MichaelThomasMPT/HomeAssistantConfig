var:
  show_shopping_list_house_stuff:
    friendly_name: Show House Stuff Shopping List
    initial_value: False

input_text:
  openfoodfacts_barcode_to_scan:
    name: Barcode To Lookup In OpenFoodFacts
rest_command:
  openfoodfacts_get_item_from_barcode:
    url: "https://world.openfoodfacts.org/api/v2/product/{{ states('input_text.openfoodfacts_barcode_to_scan') }}.json"
    method: GET

script:
  try_get_medicine_from_barcode:
    alias: "Try Get Medicine From Barcode"
    fields:
      scanned_barcode:
        description: "The number of the barcode which was scanned, as a string"
        example: "9323610009210"
    variables:
      medicine_barcodes:
        "9323610009210": "Adesan (Candesartan Cilexetil 32mg)"
        "9350299003321": "Adesan (Candesartan Cilexetil 32mg)"
        "9310488000845": "Calcium 600mg"
        "9338475031290": "Ciclosporin 25mg"
        "9338475031306": "Ciclosporin 50mg"
        "5000456027199": "Forxiga (Dapagliflozin 10mg)"
        "9315771009857": "Magnesium 500mg"
        "9369998237272": "Resprim Forte (Sulfamethoxazole and Trimethoprim 800mg / 160mg)"
        "9323610000675": "Resprim Forte (Sulfamethoxazole and Trimethoprim 800mg / 160mg)"
    sequence:
      - variables:
          medicine_name:
            text: >
              {% if (scanned_barcode | string) in medicine_barcodes %}
              {{ medicine_barcodes[(scanned_barcode | string)] }}
              {% else %}
              Not Found
              {% endif %}
      - stop: "Finished checking for medicine from barcode."
        response_variable: "medicine_name"

  toggle_var_show_shopping_list_house_stuff:
    sequence:
      - service: var.set
        data:
          entity_id:
            - var.show_shopping_list_house_stuff
          value_template: >-
            {% if is_state('var.show_shopping_list_house_stuff', 'True') %}
              False
            {% else %}
              True 
            {% endif %}

  todo_list_move_incomplete_items:
    fields:
      source_list:
        description: "Source list to copy from"
      dest_list:
        description: "Destination list to copy to"
      subtext:
        description: "The non-title text to add to the items"
      due_today:
        description: "Whether the task should have today as a due date"
        default: "False"
        #FIXME do something with this field, not in use yet
    sequence:
      - service: todo.get_items
        data:
          status:
            - needs_action
        response_variable: items
        target:
          entity_id: "{{ source_list }}"
      - repeat:
          for_each: >
            {% set list_name = items.keys() | list %}
            {{ items[list_name[0]]['items'] }}
          sequence:
            - if: 
                - alias: "Due date is set"
                  condition: template
                  value_template: "{{ due_today == 'True' }}"
              then:
                - service: todo.add_item
                  data:
                    item: >
                      {{ repeat.item.summary }}
                    description: >
                      {{ subtext }}
                    due_date: "{{ now().strftime('%Y-%m-%d') }}"
                  target:
                    entity_id: "{{ dest_list }}"
              else:
                - service: todo.add_item
                  data:
                    item: >
                      {{ repeat.item.summary }}
                    description: >
                      {{ subtext }}
                  target:
                    entity_id: "{{ dest_list }}"
            - service: todo.remove_item
              data:
                item: >
                  {{ repeat.item.summary }}
              target:
                entity_id: "{{ source_list }}"

automation:
  - alias: Todo List - Transfer Google Tasks Shopping List
    id: todolist_transfer_google_tasks_shopping_list
    trigger:
      - id: "regular_trigger"
        platform: state
        entity_id: todo.google_keep_shopping
      - id: "fallback_trigger"
        platform: time_pattern
        minutes: "/10"
    condition:
      - alias: "List isn't empty"
        condition: not
        conditions:
          - condition: state
            entity_id: todo.google_keep_shopping
            state: "0"
    action:
      - service: script.todo_list_move_incomplete_items
        data:
          source_list: todo.google_keep_shopping
          dest_list: todo.groceries_list
          subtext: "Imported from Google Tasks"

  - alias: Todo List - Transfer Google Tasks Todo List
    id: todolist_transfer_google_tasks_todo_list
    trigger:
      - id: "regular_trigger"
        platform: state
        entity_id: todo.google_keep_to_do
      - id: "fallback_trigger"
        platform: time_pattern
        minutes: "/10"
    condition:
      - alias: "List isn't empty"
        condition: not
        conditions:
          - condition: state
            entity_id: todo.google_keep_to_do
            state: "0"
    action:
      - service: script.todo_list_move_incomplete_items
        data:
          source_list: todo.google_keep_to_do
          dest_list: todo.inbox
          subtext: "Imported from Google Tasks"
          due_today: "True"

  - alias: Todo List - Add Item To Todo List Via Voice
    id: todolist_add_item_to_todo_list_via_voice
    trigger:
      - platform: conversation
        command:
          - "Add {todotask} to my (to-do|todo|to do|To Do|To-Do|ToDo) list"
          - "Remind me to {todotask}"
    action:
      - service: todo.add_item
        target:
          entity_id: todo.inbox
        data:
          item: "{{ trigger.slots.todotask }}"
          due_date: "{{ now().strftime('%Y-%m-%d') }}"

  - alias: Todo List - Add Item To Shopping List Via Voice
    id: todolist_add_item_to_shopping_list_via_voice
    trigger:
      - platform: conversation
        command:
          - "Add {fooditem} to (my|the) shopping list"
          - "Add {fooditem}"
    action:
      - service: todo.add_item
        target:
          entity_id: todo.groceries_list
        data:
          item: "{{ trigger.slots.fooditem }}"

  - alias: Todo List - Add Item To Shopping List Via Barcode Scan
    id: todolist_add_item_to_shopping_list_via_barcode_scan
    mode: queued
    trigger:
      - platform: webhook
        webhook_id: "barcode_scan"
        allowed_methods:
          - POST
        local_only: true
    action:
      - alias: Look up barcode in medicine list
        service: script.try_get_medicine_from_barcode
        response_variable: medicine_name
        data:
          scanned_barcode: "{{ trigger.json.barcode }}"
      - alias: Save Barcode To Lookup In OpenFoodFacts
        service: input_text.set_value
        data:
          entity_id: input_text.openfoodfacts_barcode_to_scan
          value: "{{ trigger.json.barcode }}"
      - alias: Lookup Barcode In OpenFoodFacts
        service: rest_command.openfoodfacts_get_item_from_barcode
        response_variable: openfoodfacts_response
      - choose:
          - conditions:
              - alias: "Scanned barcode is a known medicine"
                condition: template
                value_template: "{{ medicine_name.text != 'Not Found' }}"
            sequence:
              # Product Found
              - service: todo.add_item
                target:
                  entity_id: todo.medicine_to_buy
                data:
                  item: "{{ medicine_name.text }}"
                  description: "Added on {{ now().strftime('%d %b %Y') }} via barcode scan"
              - if:
                  - alias: "If this is the first item added to the medicine list"
                    condition: template
                    value_template: "{{ states('todo.medicine_to_buy') == '1' }}"
                then:
                  - service: todo.add_item
                    target:
                      entity_id: todo.inbox
                    data:
                      item: "Refill medicine at pharmacy"
                      due_date: "{{ now().strftime('%Y-%m-%d') }}"
              - service: tts.cloud_say
                data:
                  entity_id: "media_player.kitchen_google_home_hub"
                  message: "Added {{ medicine_name.text }} to your shopping list."
          - conditions:
              - alias: "Scanned barcode is a known grocery product"
                condition: template
                value_template: >-
                  {{ 
                    openfoodfacts_response.content.product.product_name_en != '' or
                    openfoodfacts_response.content.product.product_name != '' or
                    openfoodfacts_response.content.product.name_en != '' or
                    openfoodfacts_response.content.product.name != ''
                  }}
            sequence:
              # Product Found
              - service: todo.add_item
                target:
                  entity_id: todo.groceries_list
                data:
                  item: >-
                    {{
                      openfoodfacts_response.content.product.name_en or
                      openfoodfacts_response.content.product.product_name_en or
                      openfoodfacts_response.content.product.name or
                      openfoodfacts_response.content.product.product_name
                    }}
                  description: "Added on {{ now().strftime('%d %b %Y') }} via barcode scan"
              - service: tts.cloud_say
                data:
                  entity_id: media_player.kitchen_google_home_hub
                  message: >-
                    Added {{
                      openfoodfacts_response.content.product.name_en or
                      openfoodfacts_response.content.product.product_name_en or
                      openfoodfacts_response.content.product.name or
                      openfoodfacts_response.content.product.product_name
                    }} to your shopping list.
        default:
          - alias: "Scanned barcode is unknown"
            service: tts.cloud_say
            data:
              entity_id: media_player.kitchen_google_home_hub
              message: "The scanned barcode was not recognised."
      - delay:
          seconds: 5 #Pause to let TTS finish speaking

  - alias: Todo List - Barcode Scanner Has Woken Up
    id: todolist_barcode_scanner_has_woken_up
    mode: single
    trigger:
      - platform: webhook
        webhook_id: "barcode_ready"
        allowed_methods:
          - POST
        local_only: true
    action:
      - service: tts.cloud_say
        data:
          entity_id: media_player.kitchen_google_home_hub
          message: "The barcode scanner is ready for action."
